@startuml

left to right direction

class ArmClass {
    boundary : ArmBoundary
    stateVariables : ArmStateVariable []
    dirtyMasks : ArmDirtyMask []
    rendering : ArmRenderingStatement
}
ArmElement <|-- ArmClass
ArmScope <|-u- ArmClass

class ArmExpression {
    dependencies : ArmDependencies
}
ArmElement <|-- ArmExpression

class ArmEntryPoint {
    root : ArmClass
}
ArmElement <|-- ArmEntryPoint

class ArmExternalStateVariable
ArmStateVariable <|-- ArmExternalStateVariable

class ArmInternalStateVariable
ArmStateVariable <|-- ArmInternalStateVariable

class ArmStateVariable {
    index : Int
}
ArmElement <|-- ArmStateVariable

class ArmDirtyMask
ArmElement <|-- ArmDirtyMask

class ArmBlock {
    statements : ArmRenderingStatement []
}
ArmRenderingStatement <|-- ArmBlock

class ArmWhen {
    branches : ArmBranch []
}
ArmRenderingStatement <|-- ArmWhen

class ArmCall {
    target : ArmClass
    valueArguments : ArmValueArgument []
}
ArmRenderingStatement <|-- ArmCall

class ArmForLoop {
    iterator : ArmDeclaration
    condition : ArmExpression
    loopVariable : ArmDeclaration
    body : ArmRenderingStatement
}
ArmRenderingStatement <|-- ArmForLoop

class ArmHigherOrderCall {
    higherOrderArguments : ArmHigherOrderArgument []
}
ArmCall <|-- ArmHigherOrderCall

class ArmRenderingStatement
ArmElement <|--- ArmRenderingStatement

class ArmHigherOrderArgument {
    stateVariables : ArmStateVariable []
    rendering : ArmRenderingStatement
}
ArmExpression <|-- ArmHigherOrderArgument
ArmScope <|-r- ArmHigherOrderArgument

class ArmBranch {
    condition : ArmExpression
    result : ArmRenderingStatement
}
ArmElement <|-- ArmBranch

class ArmDeclaration {
    dependencies : ArmDependencies
}
ArmElement <|-- ArmDeclaration

class ArmValueArgument
ArmExpression <|-- ArmValueArgument

interface ArmScope {
    stateSize : Int
}

class ArmElement {
    parent : ArmElement ?
}

@enduml