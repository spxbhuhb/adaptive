

package hu.simplexion.adaptive.kotlin.runners;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link hu.simplexion.adaptive.kotlin.GenerateTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("testData/box")
@TestDataPath("$PROJECT_ROOT")
public class BoxTestGenerated extends AbstractBoxTest {
  @Test
  public void testAllFilesPresentInBox() {
    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("testData/box"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
  }

  @Nested
  @TestMetadata("testData/box/adat")
  @TestDataPath("$PROJECT_ROOT")
  public class Adat {
    @Test
    public void testAllFilesPresentInAdat() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("testData/box/adat"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("basic.kt")
    public void testBasic() {
      runTest("testData/box/adat/basic.kt");
    }
  }

  @Nested
  @TestMetadata("testData/box/base")
  @TestDataPath("$PROJECT_ROOT")
  public class Base {
    @Test
    public void testAllFilesPresentInBase() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("testData/box/base"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("basic.kt")
    public void testBasic() {
      runTest("testData/box/base/basic.kt");
    }

    @Test
    @TestMetadata("emptyComponent.kt")
    public void testEmptyComponent() {
      runTest("testData/box/base/emptyComponent.kt");
    }

    @Test
    @TestMetadata("emptyEntry.kt")
    public void testEmptyEntry() {
      runTest("testData/box/base/emptyEntry.kt");
    }

    @Test
    @TestMetadata("root.kt")
    public void testRoot() {
      runTest("testData/box/base/root.kt");
    }

    @Nested
    @TestMetadata("testData/box/base/call")
    @TestDataPath("$PROJECT_ROOT")
    public class Call {
      @Test
      @TestMetadata("accessBinding.kt")
      public void testAccessBinding() {
        runTest("testData/box/base/call/accessBinding.kt");
      }

      @Test
      public void testAllFilesPresentInCall() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("testData/box/base/call"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @Test
      @TestMetadata("higherOrder.kt")
      public void testHigherOrder() {
        runTest("testData/box/base/call/higherOrder.kt");
      }

      @Test
      @TestMetadata("propertyAccessBinding.kt")
      public void testPropertyAccessBinding() {
        runTest("testData/box/base/call/propertyAccessBinding.kt");
      }

      @Test
      @TestMetadata("withDefault.kt")
      public void testWithDefault() {
        runTest("testData/box/base/call/withDefault.kt");
      }
    }

    @Nested
    @TestMetadata("testData/box/base/delegated")
    @TestDataPath("$PROJECT_ROOT")
    public class Delegated {
      @Test
      public void testAllFilesPresentInDelegated() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("testData/box/base/delegated"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @Test
      @TestMetadata("basic.kt")
      public void testBasic() {
        runTest("testData/box/base/delegated/basic.kt");
      }
    }

    @Nested
    @TestMetadata("testData/box/base/helpers")
    @TestDataPath("$PROJECT_ROOT")
    public class Helpers {
      @Test
      @TestMetadata("adapter.kt")
      public void testAdapter() {
        runTest("testData/box/base/helpers/adapter.kt");
      }

      @Test
      public void testAllFilesPresentInHelpers() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("testData/box/base/helpers"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @Test
      @TestMetadata("fragment.kt")
      public void testFragment() {
        runTest("testData/box/base/helpers/fragment.kt");
      }

      @Test
      @TestMetadata("thisState.kt")
      public void testThisState() {
        runTest("testData/box/base/helpers/thisState.kt");
      }
    }

    @Nested
    @TestMetadata("testData/box/base/loop")
    @TestDataPath("$PROJECT_ROOT")
    public class Loop {
      @Test
      public void testAllFilesPresentInLoop() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("testData/box/base/loop"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @Test
      @TestMetadata("basic.kt")
      public void testBasic() {
        runTest("testData/box/base/loop/basic.kt");
      }

      @Test
      @TestMetadata("list.kt")
      public void testList() {
        runTest("testData/box/base/loop/list.kt");
      }

      @Test
      @TestMetadata("patch.kt")
      public void testPatch() {
        runTest("testData/box/base/loop/patch.kt");
      }
    }

    @Nested
    @TestMetadata("testData/box/base/producer")
    @TestDataPath("$PROJECT_ROOT")
    public class Producer {
      @Test
      public void testAllFilesPresentInProducer() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("testData/box/base/producer"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @Test
      @TestMetadata("poll.kt")
      public void testPoll() {
        runTest("testData/box/base/producer/poll.kt");
      }
    }

    @Nested
    @TestMetadata("testData/box/base/select")
    @TestDataPath("$PROJECT_ROOT")
    public class Select {
      @Test
      public void testAllFilesPresentInSelect() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("testData/box/base/select"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @Test
      @TestMetadata("ifElse.kt")
      public void testIfElse() {
        runTest("testData/box/base/select/ifElse.kt");
      }

      @Test
      @TestMetadata("ifElsePatch.kt")
      public void testIfElsePatch() {
        runTest("testData/box/base/select/ifElsePatch.kt");
      }

      @Test
      @TestMetadata("ifOnlyFalse.kt")
      public void testIfOnlyFalse() {
        runTest("testData/box/base/select/ifOnlyFalse.kt");
      }

      @Test
      @TestMetadata("ifOnlyTrue.kt")
      public void testIfOnlyTrue() {
        runTest("testData/box/base/select/ifOnlyTrue.kt");
      }

      @Test
      @TestMetadata("whenNoSubjectElse.kt")
      public void testWhenNoSubjectElse() {
        runTest("testData/box/base/select/whenNoSubjectElse.kt");
      }

      @Test
      @TestMetadata("whenNoSubjectNoElse.kt")
      public void testWhenNoSubjectNoElse() {
        runTest("testData/box/base/select/whenNoSubjectNoElse.kt");
      }

      @Test
      @TestMetadata("whenSubjectCalc.kt")
      public void testWhenSubjectCalc() {
        runTest("testData/box/base/select/whenSubjectCalc.kt");
      }

      @Test
      @TestMetadata("whenSubjectConditions.kt")
      public void testWhenSubjectConditions() {
        runTest("testData/box/base/select/whenSubjectConditions.kt");
      }
    }

    @Nested
    @TestMetadata("testData/box/base/sequence")
    @TestDataPath("$PROJECT_ROOT")
    public class Sequence {
      @Test
      public void testAllFilesPresentInSequence() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("testData/box/base/sequence"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @Test
      @TestMetadata("inHigherOrder.kt")
      public void testInHigherOrder() {
        runTest("testData/box/base/sequence/inHigherOrder.kt");
      }

      @Test
      @TestMetadata("sequence.kt")
      public void testSequence() {
        runTest("testData/box/base/sequence/sequence.kt");
      }
    }

    @Nested
    @TestMetadata("testData/box/base/support")
    @TestDataPath("$PROJECT_ROOT")
    public class Support {
      @Test
      public void testAllFilesPresentInSupport() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("testData/box/base/support"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @Test
      @TestMetadata("supportFunctionCallOut.kt")
      public void testSupportFunctionCallOut() {
        runTest("testData/box/base/support/supportFunctionCallOut.kt");
      }

      @Test
      @TestMetadata("supportFunctionFromRoot.kt")
      public void testSupportFunctionFromRoot() {
        runTest("testData/box/base/support/supportFunctionFromRoot.kt");
      }

      @Test
      @TestMetadata("supportFunctionOutreach.kt")
      public void testSupportFunctionOutreach() {
        runTest("testData/box/base/support/supportFunctionOutreach.kt");
      }

      @Test
      @TestMetadata("supportFunctionReturn.kt")
      public void testSupportFunctionReturn() {
        runTest("testData/box/base/support/supportFunctionReturn.kt");
      }

      @Test
      @TestMetadata("supportFunctionStateUpdate.kt")
      public void testSupportFunctionStateUpdate() {
        runTest("testData/box/base/support/supportFunctionStateUpdate.kt");
      }

      @Test
      @TestMetadata("supportFunctionSuspend.kt")
      public void testSupportFunctionSuspend() {
        runTest("testData/box/base/support/supportFunctionSuspend.kt");
      }
    }

    @Nested
    @TestMetadata("testData/box/base/transform")
    @TestDataPath("$PROJECT_ROOT")
    public class Transform {
      @Test
      public void testAllFilesPresentInTransform() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("testData/box/base/transform"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @Test
      @TestMetadata("basic.kt")
      public void testBasic() {
        runTest("testData/box/base/transform/basic.kt");
      }
    }

    @Nested
    @TestMetadata("testData/box/base/variables")
    @TestDataPath("$PROJECT_ROOT")
    public class Variables {
      @Test
      public void testAllFilesPresentInVariables() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("testData/box/base/variables"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @Test
      @TestMetadata("basic.kt")
      public void testBasic() {
        runTest("testData/box/base/variables/basic.kt");
      }

      @Test
      @TestMetadata("many.kt")
      public void testMany() {
        runTest("testData/box/base/variables/many.kt");
      }

      @Test
      @TestMetadata("onlyExternal.kt")
      public void testOnlyExternal() {
        runTest("testData/box/base/variables/onlyExternal.kt");
      }

      @Test
      @TestMetadata("onlyInternal.kt")
      public void testOnlyInternal() {
        runTest("testData/box/base/variables/onlyInternal.kt");
      }

      @Test
      @TestMetadata("variables.kt")
      public void testVariables() {
        runTest("testData/box/base/variables/variables.kt");
      }
    }
  }

  @Nested
  @TestMetadata("testData/box/server")
  @TestDataPath("$PROJECT_ROOT")
  public class Server {
    @Test
    public void testAllFilesPresentInServer() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("testData/box/server"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("basic.kt")
    public void testBasic() {
      runTest("testData/box/server/basic.kt");
    }
  }

  @Nested
  @TestMetadata("testData/box/service")
  @TestDataPath("$PROJECT_ROOT")
  public class Service {
    @Test
    public void testAllFilesPresentInService() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("testData/box/service"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("basic.kt")
    public void testBasic() {
      runTest("testData/box/service/basic.kt");
    }

    @Nested
    @TestMetadata("testData/box/service/types")
    @TestDataPath("$PROJECT_ROOT")
    public class Types {
      @Test
      public void testAllFilesPresentInTypes() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("testData/box/service/types"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @Test
      @TestMetadata("int.kt")
      public void testInt() {
        runTest("testData/box/service/types/int.kt");
      }

      @Test
      @TestMetadata("string.kt")
      public void testString() {
        runTest("testData/box/service/types/string.kt");
      }

      @Test
      @TestMetadata("unit.kt")
      public void testUnit() {
        runTest("testData/box/service/types/unit.kt");
      }
    }
  }
}
