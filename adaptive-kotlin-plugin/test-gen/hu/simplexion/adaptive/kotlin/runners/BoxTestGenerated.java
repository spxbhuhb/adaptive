

package hu.simplexion.adaptive.kotlin.runners;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link hu.simplexion.adaptive.kotlin.GenerateTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("testData/box")
@TestDataPath("$PROJECT_ROOT")
public class BoxTestGenerated extends AbstractBoxTest {
    @Test
    public void testAllFilesPresentInBox() throws Exception {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("testData/box"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Nested
    @TestMetadata("testData/box/adat")
    @TestDataPath("$PROJECT_ROOT")
    public class Adat {
        @Test
        public void testAllFilesPresentInAdat() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("testData/box/adat"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Test
        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("testData/box/adat/basic.kt");
        }
    }

    @Nested
    @TestMetadata("testData/box/foundation")
    @TestDataPath("$PROJECT_ROOT")
    public class Foundation {
        @Test
        public void testAllFilesPresentInFoundation() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("testData/box/foundation"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Test
        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("testData/box/foundation/basic.kt");
        }

        @Test
        @TestMetadata("emptyComponent.kt")
        public void testEmptyComponent() throws Exception {
            runTest("testData/box/foundation/emptyComponent.kt");
        }

        @Test
        @TestMetadata("emptyEntry.kt")
        public void testEmptyEntry() throws Exception {
            runTest("testData/box/foundation/emptyEntry.kt");
        }

        @Test
        @TestMetadata("root.kt")
        public void testRoot() throws Exception {
            runTest("testData/box/foundation/root.kt");
        }

        @Nested
        @TestMetadata("testData/box/foundation/call")
        @TestDataPath("$PROJECT_ROOT")
        public class Call {
            @Test
            @TestMetadata("accessBinding.kt")
            public void testAccessBinding() throws Exception {
                runTest("testData/box/foundation/call/accessBinding.kt");
            }

            @Test
            public void testAllFilesPresentInCall() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("testData/box/foundation/call"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Test
            @TestMetadata("higherOrder.kt")
            public void testHigherOrder() throws Exception {
                runTest("testData/box/foundation/call/higherOrder.kt");
            }

            @Test
            @TestMetadata("propertyAccessBinding.kt")
            public void testPropertyAccessBinding() throws Exception {
                runTest("testData/box/foundation/call/propertyAccessBinding.kt");
            }

            @Test
            @TestMetadata("withDefault.kt")
            public void testWithDefault() throws Exception {
                runTest("testData/box/foundation/call/withDefault.kt");
            }
        }

        @Nested
        @TestMetadata("testData/box/foundation/collector")
        @TestDataPath("$PROJECT_ROOT")
        public class Collector {
            @Test
            public void testAllFilesPresentInCollector() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("testData/box/foundation/collector"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Test
            @TestMetadata("basic.kt")
            public void testBasic() throws Exception {
                runTest("testData/box/foundation/collector/basic.kt");
            }

            @Test
            @TestMetadata("visibility.kt")
            public void testVisibility() throws Exception {
                runTest("testData/box/foundation/collector/visibility.kt");
            }
        }

        @Nested
        @TestMetadata("testData/box/foundation/expect")
        @TestDataPath("$PROJECT_ROOT")
        public class Expect {
            @Test
            public void testAllFilesPresentInExpect() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("testData/box/foundation/expect"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Test
            @TestMetadata("expect.kt")
            public void testExpect() throws Exception {
                runTest("testData/box/foundation/expect/expect.kt");
            }
        }

        @Nested
        @TestMetadata("testData/box/foundation/helpers")
        @TestDataPath("$PROJECT_ROOT")
        public class Helpers {
            @Test
            @TestMetadata("adapter.kt")
            public void testAdapter() throws Exception {
                runTest("testData/box/foundation/helpers/adapter.kt");
            }

            @Test
            public void testAllFilesPresentInHelpers() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("testData/box/foundation/helpers"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Test
            @TestMetadata("fragment.kt")
            public void testFragment() throws Exception {
                runTest("testData/box/foundation/helpers/fragment.kt");
            }

            @Test
            @TestMetadata("thisState.kt")
            public void testThisState() throws Exception {
                runTest("testData/box/foundation/helpers/thisState.kt");
            }
        }

        @Nested
        @TestMetadata("testData/box/foundation/loop")
        @TestDataPath("$PROJECT_ROOT")
        public class Loop {
            @Test
            public void testAllFilesPresentInLoop() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("testData/box/foundation/loop"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Test
            @TestMetadata("basic.kt")
            public void testBasic() throws Exception {
                runTest("testData/box/foundation/loop/basic.kt");
            }

            @Test
            @TestMetadata("list.kt")
            public void testList() throws Exception {
                runTest("testData/box/foundation/loop/list.kt");
            }

            @Test
            @TestMetadata("patch.kt")
            public void testPatch() throws Exception {
                runTest("testData/box/foundation/loop/patch.kt");
            }
        }

        @Nested
        @TestMetadata("testData/box/foundation/producer")
        @TestDataPath("$PROJECT_ROOT")
        public class Producer {
            @Test
            public void testAllFilesPresentInProducer() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("testData/box/foundation/producer"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Test
            @TestMetadata("poll.kt")
            public void testPoll() throws Exception {
                runTest("testData/box/foundation/producer/poll.kt");
            }
        }

        @Nested
        @TestMetadata("testData/box/foundation/select")
        @TestDataPath("$PROJECT_ROOT")
        public class Select {
            @Test
            public void testAllFilesPresentInSelect() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("testData/box/foundation/select"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Test
            @TestMetadata("ifElse.kt")
            public void testIfElse() throws Exception {
                runTest("testData/box/foundation/select/ifElse.kt");
            }

            @Test
            @TestMetadata("ifElsePatch.kt")
            public void testIfElsePatch() throws Exception {
                runTest("testData/box/foundation/select/ifElsePatch.kt");
            }

            @Test
            @TestMetadata("ifOnlyFalse.kt")
            public void testIfOnlyFalse() throws Exception {
                runTest("testData/box/foundation/select/ifOnlyFalse.kt");
            }

            @Test
            @TestMetadata("ifOnlyTrue.kt")
            public void testIfOnlyTrue() throws Exception {
                runTest("testData/box/foundation/select/ifOnlyTrue.kt");
            }

            @Test
            @TestMetadata("whenNoSubjectElse.kt")
            public void testWhenNoSubjectElse() throws Exception {
                runTest("testData/box/foundation/select/whenNoSubjectElse.kt");
            }

            @Test
            @TestMetadata("whenNoSubjectNoElse.kt")
            public void testWhenNoSubjectNoElse() throws Exception {
                runTest("testData/box/foundation/select/whenNoSubjectNoElse.kt");
            }

            @Test
            @TestMetadata("whenSubjectCalc.kt")
            public void testWhenSubjectCalc() throws Exception {
                runTest("testData/box/foundation/select/whenSubjectCalc.kt");
            }

            @Test
            @TestMetadata("whenSubjectConditions.kt")
            public void testWhenSubjectConditions() throws Exception {
                runTest("testData/box/foundation/select/whenSubjectConditions.kt");
            }
        }

        @Nested
        @TestMetadata("testData/box/foundation/sequence")
        @TestDataPath("$PROJECT_ROOT")
        public class Sequence {
            @Test
            public void testAllFilesPresentInSequence() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("testData/box/foundation/sequence"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Test
            @TestMetadata("inHigherOrder.kt")
            public void testInHigherOrder() throws Exception {
                runTest("testData/box/foundation/sequence/inHigherOrder.kt");
            }

            @Test
            @TestMetadata("sequence.kt")
            public void testSequence() throws Exception {
                runTest("testData/box/foundation/sequence/sequence.kt");
            }
        }

        @Nested
        @TestMetadata("testData/box/foundation/support")
        @TestDataPath("$PROJECT_ROOT")
        public class Support {
            @Test
            public void testAllFilesPresentInSupport() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("testData/box/foundation/support"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Test
            @TestMetadata("supportFunctionCallOut.kt")
            public void testSupportFunctionCallOut() throws Exception {
                runTest("testData/box/foundation/support/supportFunctionCallOut.kt");
            }

            @Test
            @TestMetadata("supportFunctionFromRoot.kt")
            public void testSupportFunctionFromRoot() throws Exception {
                runTest("testData/box/foundation/support/supportFunctionFromRoot.kt");
            }

            @Test
            @TestMetadata("supportFunctionOutreach.kt")
            public void testSupportFunctionOutreach() throws Exception {
                runTest("testData/box/foundation/support/supportFunctionOutreach.kt");
            }

            @Test
            @TestMetadata("supportFunctionReturn.kt")
            public void testSupportFunctionReturn() throws Exception {
                runTest("testData/box/foundation/support/supportFunctionReturn.kt");
            }

            @Test
            @TestMetadata("supportFunctionStateUpdate.kt")
            public void testSupportFunctionStateUpdate() throws Exception {
                runTest("testData/box/foundation/support/supportFunctionStateUpdate.kt");
            }

            @Test
            @TestMetadata("supportFunctionSuspend.kt")
            public void testSupportFunctionSuspend() throws Exception {
                runTest("testData/box/foundation/support/supportFunctionSuspend.kt");
            }
        }

        @Nested
        @TestMetadata("testData/box/foundation/transform")
        @TestDataPath("$PROJECT_ROOT")
        public class Transform {
            @Test
            public void testAllFilesPresentInTransform() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("testData/box/foundation/transform"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Test
            @TestMetadata("basic.kt")
            public void testBasic() throws Exception {
                runTest("testData/box/foundation/transform/basic.kt");
            }
        }

        @Nested
        @TestMetadata("testData/box/foundation/variables")
        @TestDataPath("$PROJECT_ROOT")
        public class Variables {
            @Test
            public void testAllFilesPresentInVariables() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("testData/box/foundation/variables"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Test
            @TestMetadata("basic.kt")
            public void testBasic() throws Exception {
                runTest("testData/box/foundation/variables/basic.kt");
            }

            @Test
            @TestMetadata("many.kt")
            public void testMany() throws Exception {
                runTest("testData/box/foundation/variables/many.kt");
            }

            @Test
            @TestMetadata("onlyExternal.kt")
            public void testOnlyExternal() throws Exception {
                runTest("testData/box/foundation/variables/onlyExternal.kt");
            }

            @Test
            @TestMetadata("onlyInternal.kt")
            public void testOnlyInternal() throws Exception {
                runTest("testData/box/foundation/variables/onlyInternal.kt");
            }

            @Test
            @TestMetadata("variables.kt")
            public void testVariables() throws Exception {
                runTest("testData/box/foundation/variables/variables.kt");
            }
        }
    }

    @Nested
    @TestMetadata("testData/box/server")
    @TestDataPath("$PROJECT_ROOT")
    public class Server {
        @Test
        public void testAllFilesPresentInServer() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("testData/box/server"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Test
        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("testData/box/server/basic.kt");
        }
    }

    @Nested
    @TestMetadata("testData/box/service")
    @TestDataPath("$PROJECT_ROOT")
    public class Service {
        @Test
        public void testAllFilesPresentInService() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("testData/box/service"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Test
        @TestMetadata("basic.kt")
        public void testBasic() throws Exception {
            runTest("testData/box/service/basic.kt");
        }

        @Nested
        @TestMetadata("testData/box/service/types")
        @TestDataPath("$PROJECT_ROOT")
        public class Types {
            @Test
            public void testAllFilesPresentInTypes() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("testData/box/service/types"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Test
            @TestMetadata("int.kt")
            public void testInt() throws Exception {
                runTest("testData/box/service/types/int.kt");
            }

            @Test
            @TestMetadata("string.kt")
            public void testString() throws Exception {
                runTest("testData/box/service/types/string.kt");
            }

            @Test
            @TestMetadata("unit.kt")
            public void testUnit() throws Exception {
                runTest("testData/box/service/types/unit.kt");
            }
        }
    }
}
