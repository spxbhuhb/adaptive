package hu.simplexion.z2.services

import hu.simplexion.z2.services.transport.ServiceCallTransport
import hu.simplexion.z2.utility.FqNameAware
import hu.simplexion.z2.utility.pluginGenerated
import hu.simplexion.z2.wireformat.WireFormatEncoder

interface Service : FqNameAware {

    /**
     * Name of the service. You can change this field at anytime in case you
     * need multiple destinations for the same service API.
     *
     * Overridden by the plugin with:
     *
     * ```kotlin
     * override var fqName : String = "<fully qualified name of the service class>"
     * ```
     */
    override var fqName: String
        get() = pluginGenerated() // so we don't have to override in the interface that extends Service
        set(value) = pluginGenerated(value)

    /**
     * The call transport to use when calling a service function. You can change this
     * field to use different call transport than the default. When null, service
     * calls use [defaultServiceCallTransport].
     *
     * Overridden by the plugin with:
     *
     * ```kotlin
     * override var callTransport : ServiceCallTransport? = null
     * ```
     */
    var serviceCallTransport: ServiceCallTransport?
        get() = pluginGenerated() // so we don't have to override in the interface that extends Service
        set(value) = pluginGenerated(value)

    val wireFormatEncoder
        get() = serviceCallTransport !!.wireFormatEncoder

    val wireFormatStandalone
        get() = serviceCallTransport !!.wireFormatStandalone

    /**
     * Perform an actual call to the service. This function is called by the code generated by
     * the plugin.
     */
    suspend fun callService(funName: String, payload: WireFormatEncoder): ByteArray =
        serviceCallTransport !!.call(fqName, funName, payload.pack())
}